Symbols:
!
%
&
(
)
*
+
,
-
.
/
:
;
<
=
>
?
ADD_ASSIGN
AND_ASSIGN
AND_OP
AUTO
BREAK
CASE
CHAR
CONST
CONSTANT
CONTINUE
DEC_OP
DEFAULT
DIV_ASSIGN
DO
DOUBLE
ELLIPSIS
ELSE
ENUM
EQ_OP
EXTERN
FLOAT
FOR
GE_OP
GOTO
IDENTIFIER
IF
INC_OP
INT
LEFT_ASSIGN
LEFT_OP
LE_OP
LONG
MOD_ASSIGN
MUL_ASSIGN
NE_OP
OR_ASSIGN
OR_OP
PTR_OP
REGISTER
RETURN
RIGHT_ASSIGN
RIGHT_OP
SHORT
SIGNED
SIZEOF
STATIC
STRING_LITERAL
STRUCT
SUB_ASSIGN
SWITCH
TYPEDEF
TYPE_NAME
UNION
UNSIGNED
VOID
VOLATILE
WHILE
XOR_ASSIGN
[
]
^
abstract_declarator
additive_expression
and_expression
argument_expression_list
assignment_expression
assignment_operator
cast_expression
compound_statement
conditional_expression
constant_expression
declaration
declaration_list
declaration_specifiers
declarator
direct_abstract_declarator
direct_declarator
enum_specifier
enumerator
enumerator_list
equality_expression
exclusive_or_expression
expression
expression_statement
external_declaration
function_definition
identifier_list
inclusive_or_expression
init_declarator
init_declarator_list
initializer
initializer_list
iteration_statement
jump_statement
labeled_statement
logical_and_expression
logical_or_expression
m_quad
m_quad_j
m_quad_jz
multiplicative_expression
parameter_declaration
parameter_list
parameter_type_list
pointer
postfix_expression
primary_expression
program
relational_expression
selection_statement
shift_expression
specifier_qualifier_list
statement
statement_list
storage_class_specifier
struct_declaration
struct_declaration_list
struct_declarator
struct_declarator_list
struct_or_union
struct_or_union_specifier
translation_unit
type_name
type_qualifier
type_qualifier_list
type_specifier
unary_expression
unary_operator
{
|
}
~
--------------------------------------
unary_expression->postfix_expression  | INC_OP unary_expression  | DEC_OP unary_expression  | unary_operator cast_expression  | SIZEOF unary_expression  | SIZEOF ( type_name ) 
m_quad_j->@ 
struct_declaration->specifier_qualifier_list struct_declarator_list ; 
expression->assignment_expression  | expression , assignment_expression 
program->translation_unit 
primary_expression->IDENTIFIER  | CONSTANT  | STRING_LITERAL  | ( expression ) 
struct_or_union->STRUCT  | UNION 
expression_statement->;  | expression ; 
postfix_expression->primary_expression  | postfix_expression [ expression ]  | postfix_expression ( )  | postfix_expression ( argument_expression_list )  | postfix_expression . IDENTIFIER  | postfix_expression PTR_OP IDENTIFIER  | postfix_expression INC_OP  | postfix_expression DEC_OP 
storage_class_specifier->TYPEDEF  | EXTERN  | STATIC  | AUTO  | REGISTER 
argument_expression_list->assignment_expression  | argument_expression_list , assignment_expression 
type_name->specifier_qualifier_list  | specifier_qualifier_list abstract_declarator 
unary_operator->&  | *  | +  | -  | ~  | ! 
cast_expression->unary_expression  | ( type_name ) cast_expression 
statement->labeled_statement  | compound_statement  | expression_statement  | selection_statement  | iteration_statement  | jump_statement 
struct_declarator->declarator  | : constant_expression  | declarator : constant_expression 
conditional_expression->logical_or_expression  | logical_or_expression ? expression : conditional_expression 
multiplicative_expression->cast_expression  | multiplicative_expression * cast_expression  | multiplicative_expression / cast_expression  | multiplicative_expression % cast_expression 
additive_expression->multiplicative_expression  | additive_expression + multiplicative_expression  | additive_expression - multiplicative_expression 
constant_expression->conditional_expression 
compound_statement->{ }  | { statement_list }  | { declaration_list }  | { declaration_list statement_list } 
direct_declarator->IDENTIFIER  | ( declarator )  | direct_declarator [ constant_expression ]  | direct_declarator [ ]  | direct_declarator ( parameter_type_list )  | direct_declarator ( identifier_list )  | direct_declarator ( ) 
shift_expression->additive_expression  | shift_expression LEFT_OP additive_expression  | shift_expression RIGHT_OP additive_expression 
relational_expression->shift_expression  | relational_expression < shift_expression  | relational_expression > shift_expression  | relational_expression LE_OP shift_expression  | relational_expression GE_OP shift_expression 
equality_expression->relational_expression  | equality_expression EQ_OP relational_expression  | equality_expression NE_OP relational_expression 
and_expression->equality_expression  | and_expression & equality_expression 
exclusive_or_expression->and_expression  | exclusive_or_expression ^ and_expression 
inclusive_or_expression->exclusive_or_expression  | inclusive_or_expression | exclusive_or_expression 
logical_and_expression->inclusive_or_expression  | logical_and_expression AND_OP inclusive_or_expression 
logical_or_expression->logical_and_expression  | logical_or_expression OR_OP logical_and_expression 
translation_unit->external_declaration  | translation_unit external_declaration 
assignment_expression->conditional_expression  | unary_expression assignment_operator assignment_expression 
assignment_operator->=  | MUL_ASSIGN  | DIV_ASSIGN  | MOD_ASSIGN  | ADD_ASSIGN  | SUB_ASSIGN  | LEFT_ASSIGN  | RIGHT_ASSIGN  | AND_ASSIGN  | XOR_ASSIGN  | OR_ASSIGN 
declaration->declaration_specifiers ;  | declaration_specifiers init_declarator_list ; 
init_declarator->declarator  | declarator = initializer 
struct_declarator_list->struct_declarator  | struct_declarator_list , struct_declarator 
function_definition->declaration_specifiers declarator declaration_list compound_statement  | declaration_specifiers declarator compound_statement  | declarator declaration_list compound_statement  | declarator compound_statement 
statement_list->statement  | statement_list statement 
declaration_specifiers->storage_class_specifier  | storage_class_specifier declaration_specifiers  | type_specifier  | type_specifier declaration_specifiers  | type_qualifier  | type_qualifier declaration_specifiers 
init_declarator_list->init_declarator  | init_declarator_list , init_declarator 
declaration_list->declaration  | declaration_list declaration 
type_specifier->VOID  | CHAR  | SHORT  | INT  | LONG  | FLOAT  | DOUBLE  | SIGNED  | UNSIGNED  | struct_or_union_specifier  | enum_specifier  | TYPE_NAME 
jump_statement->GOTO IDENTIFIER ;  | CONTINUE ;  | BREAK ;  | RETURN ;  | RETURN expression ; 
direct_abstract_declarator->( abstract_declarator )  | [ ]  | [ constant_expression ]  | direct_abstract_declarator [ ]  | direct_abstract_declarator [ constant_expression ]  | ( )  | ( parameter_type_list )  | direct_abstract_declarator ( )  | direct_abstract_declarator ( parameter_type_list ) 
enum_specifier->ENUM { enumerator_list }  | ENUM IDENTIFIER { enumerator_list }  | ENUM IDENTIFIER 
struct_or_union_specifier->struct_or_union IDENTIFIER { struct_declaration_list }  | struct_or_union { struct_declaration_list }  | struct_or_union IDENTIFIER 
struct_declaration_list->struct_declaration  | struct_declaration_list struct_declaration 
specifier_qualifier_list->type_specifier specifier_qualifier_list  | type_specifier  | type_qualifier specifier_qualifier_list  | type_qualifier 
enumerator_list->enumerator  | enumerator_list , enumerator 
enumerator->IDENTIFIER  | IDENTIFIER = constant_expression 
type_qualifier->CONST  | VOLATILE 
declarator->pointer direct_declarator  | direct_declarator 
parameter_type_list->parameter_list  | parameter_list , ELLIPSIS 
pointer->*  | * type_qualifier_list  | * pointer  | * type_qualifier_list pointer 
abstract_declarator->pointer  | direct_abstract_declarator  | pointer direct_abstract_declarator 
type_qualifier_list->type_qualifier  | type_qualifier_list type_qualifier 
external_declaration->function_definition  | declaration 
parameter_list->parameter_declaration  | parameter_list , parameter_declaration 
parameter_declaration->declaration_specifiers declarator  | declaration_specifiers abstract_declarator  | declaration_specifiers 
initializer->assignment_expression  | { initializer_list }  | { initializer_list , } 
identifier_list->IDENTIFIER  | identifier_list , IDENTIFIER 
initializer_list->initializer  | initializer_list , initializer 
labeled_statement->IDENTIFIER : statement  | CASE constant_expression : statement  | DEFAULT : statement 
selection_statement->IF ( expression ) m_quad_jz statement  | IF ( expression ) m_quad_jz statement m_quad_j ELSE m_quad statement  | SWITCH ( expression ) statement 
iteration_statement->WHILE m_quad ( expression ) m_quad_jz statement  | DO m_quad statement WHILE ( expression ) ;  | FOR ( expression_statement expression_statement ) statement  | FOR ( expression_statement m_quad expression_statement m_quad_jz m_quad_j expression ) m_quad_j statement 
m_quad->@ 
m_quad_jz->@ 
