Action Table
Move: read INT, push state 11
Conclude: use rule type_specifier := INT  At State : 37
Conclude: use rule declaration_specifiers := type_specifier  At State : 25
Move: read IDENTIFIER, push state 52
Conclude: use rule direct_declarator := IDENTIFIER  At State : 54
Move: read (, push state 87
Move: read ), push state 251
Conclude: use rule direct_declarator := direct_declarator ( )  At State : 54
Conclude: use rule declarator := direct_declarator  At State : 53
Move: read {, push state 62
Move: read INT, push state 11
Conclude: use rule type_specifier := INT  At State : 37
Conclude: use rule declaration_specifiers := type_specifier  At State : 133
Move: read IDENTIFIER, push state 96
Conclude: use rule direct_declarator := IDENTIFIER  At State : 98
Conclude: use rule declarator := direct_declarator  At State : 97
Conclude: use rule init_declarator := declarator  At State : 55
Conclude: use rule init_declarator_list := init_declarator  At State : 355
Move: read ;, push state 658
Conclude: use rule declaration := declaration_specifiers init_declarator_list ;  At State : 131
Conclude: use rule declaration_list := declaration  At State : 132
Move: read INT, push state 11
Conclude: use rule type_specifier := INT  At State : 37
Conclude: use rule declaration_specifiers := type_specifier  At State : 133
Move: read IDENTIFIER, push state 96
Conclude: use rule direct_declarator := IDENTIFIER  At State : 98
Conclude: use rule declarator := direct_declarator  At State : 97
Conclude: use rule init_declarator := declarator  At State : 55
Conclude: use rule init_declarator_list := init_declarator  At State : 355
Move: read ;, push state 658
Conclude: use rule declaration := declaration_specifiers init_declarator_list ;  At State : 351
Conclude: use rule declaration_list := declaration_list declaration  At State : 132
Move: read INT, push state 11
Conclude: use rule type_specifier := INT  At State : 37
Conclude: use rule declaration_specifiers := type_specifier  At State : 133
Move: read IDENTIFIER, push state 96
Conclude: use rule direct_declarator := IDENTIFIER  At State : 98
Conclude: use rule declarator := direct_declarator  At State : 97
Move: read =, push state 84
Move: read CONSTANT, push state 110
Conclude: use rule primary_expression := CONSTANT  At State : 146
Conclude: use rule postfix_expression := primary_expression  At State : 145
Conclude: use rule unary_expression := postfix_expression  At State : 152
Conclude: use rule cast_expression := unary_expression  At State : 128
Conclude: use rule multiplicative_expression := cast_expression  At State : 144
Conclude: use rule additive_expression := multiplicative_expression  At State : 125
Move: read +, push state 348
Move: read CONSTANT, push state 644
Conclude: use rule primary_expression := CONSTANT  At State : 652
Conclude: use rule postfix_expression := primary_expression  At State : 651
Conclude: use rule unary_expression := postfix_expression  At State : 653
Conclude: use rule cast_expression := unary_expression  At State : 128
Conclude: use rule multiplicative_expression := cast_expression  At State : 650
Move: read *, push state 366
Move: read CONSTANT, push state 644
Conclude: use rule primary_expression := CONSTANT  At State : 652
Conclude: use rule postfix_expression := primary_expression  At State : 651
Conclude: use rule unary_expression := postfix_expression  At State : 653
Conclude: use rule cast_expression := unary_expression  At State : 692
Conclude: use rule multiplicative_expression := multiplicative_expression * cast_expression  At State : 650
Conclude: use rule additive_expression := additive_expression + multiplicative_expression  At State : 125
Move: read +, push state 348
Move: read CONSTANT, push state 644
Conclude: use rule primary_expression := CONSTANT  At State : 652
Conclude: use rule postfix_expression := primary_expression  At State : 651
Conclude: use rule unary_expression := postfix_expression  At State : 653
Conclude: use rule cast_expression := unary_expression  At State : 128
Conclude: use rule multiplicative_expression := cast_expression  At State : 650
Conclude: use rule additive_expression := additive_expression + multiplicative_expression  At State : 125
Conclude: use rule shift_expression := additive_expression  At State : 149
Conclude: use rule relational_expression := shift_expression  At State : 147
Conclude: use rule equality_expression := relational_expression  At State : 134
Conclude: use rule and_expression := equality_expression  At State : 126
Conclude: use rule exclusive_or_expression := and_expression  At State : 135
Conclude: use rule inclusive_or_expression := exclusive_or_expression  At State : 138
Conclude: use rule logical_and_expression := inclusive_or_expression  At State : 142
Conclude: use rule logical_or_expression := logical_and_expression  At State : 143
Conclude: use rule conditional_expression := logical_or_expression  At State : 130
Conclude: use rule assignment_expression := conditional_expression  At State : 247
Conclude: use rule initializer := assignment_expression  At State : 248
Conclude: use rule init_declarator := declarator = initializer  At State : 55
Conclude: use rule init_declarator_list := init_declarator  At State : 355
Move: read ;, push state 658
Conclude: use rule declaration := declaration_specifiers init_declarator_list ;  At State : 351
Conclude: use rule declaration_list := declaration_list declaration  At State : 132
Move: read INT, push state 11
Conclude: use rule type_specifier := INT  At State : 37
Conclude: use rule declaration_specifiers := type_specifier  At State : 133
Move: read IDENTIFIER, push state 96
Conclude: use rule direct_declarator := IDENTIFIER  At State : 98
Conclude: use rule declarator := direct_declarator  At State : 97
Conclude: use rule init_declarator := declarator  At State : 55
Conclude: use rule init_declarator_list := init_declarator  At State : 355
Move: read ;, push state 658
Conclude: use rule declaration := declaration_specifiers init_declarator_list ;  At State : 351
Conclude: use rule declaration_list := declaration_list declaration  At State : 132
Move: read IDENTIFIER, push state 117
Conclude: use rule primary_expression := IDENTIFIER  At State : 146
Conclude: use rule postfix_expression := primary_expression  At State : 145
Conclude: use rule unary_expression := postfix_expression  At State : 152
Move: read =, push state 382
Conclude: use rule assignment_operator := =  At State : 393
Move: read IDENTIFIER, push state 246
Conclude: use rule primary_expression := IDENTIFIER  At State : 146
Conclude: use rule postfix_expression := primary_expression  At State : 145
Conclude: use rule unary_expression := postfix_expression  At State : 152
Conclude: use rule cast_expression := unary_expression  At State : 128
Conclude: use rule multiplicative_expression := cast_expression  At State : 144
Conclude: use rule additive_expression := multiplicative_expression  At State : 125
Move: read +, push state 348
Move: read CONSTANT, push state 644
Conclude: use rule primary_expression := CONSTANT  At State : 652
Conclude: use rule postfix_expression := primary_expression  At State : 651
Conclude: use rule unary_expression := postfix_expression  At State : 653
Conclude: use rule cast_expression := unary_expression  At State : 128
Conclude: use rule multiplicative_expression := cast_expression  At State : 650
Conclude: use rule additive_expression := additive_expression + multiplicative_expression  At State : 125
Conclude: use rule shift_expression := additive_expression  At State : 149
Conclude: use rule relational_expression := shift_expression  At State : 147
Conclude: use rule equality_expression := relational_expression  At State : 134
Conclude: use rule and_expression := equality_expression  At State : 126
Conclude: use rule exclusive_or_expression := and_expression  At State : 135
Conclude: use rule inclusive_or_expression := exclusive_or_expression  At State : 138
Conclude: use rule logical_and_expression := inclusive_or_expression  At State : 142
Conclude: use rule logical_or_expression := logical_and_expression  At State : 143
Conclude: use rule conditional_expression := logical_or_expression  At State : 130
Conclude: use rule assignment_expression := conditional_expression  At State : 730
Conclude: use rule assignment_expression := unary_expression assignment_operator assignment_expression  At State : 127
Conclude: use rule expression := assignment_expression  At State : 136
Move: read ;, push state 360
