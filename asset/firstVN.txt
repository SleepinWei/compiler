<Program>: @empty, $double, $char, $int, 
<assignment_expression>: $id, 
<start>: @empty, $double, $char, $int, 
<primary_expression>: $id, $num, $(, 
<function>: 
<operator>: $+, $-, $*, $/, $%, $<, $>, 
<constant_expression>: $id, $num, $(, 
<arithmetic_expression>: $+, $-, $*, $/, $%, $<, $>, $id, $num, $(, @empty, 
<assignment_operator>: $=, 
<type_specifier>: $double, $char, $int, 
<assignment_expression_profix>: $,, @empty, 
<assignment_expression_list>: $id, @empty, 
<function_expression>: 
<selection_statement>: $if, 
<expression>: $id, $num, $(, 
<expression_profix>: $,, @empty, 
<expression_list>: $id, $num, $(, @empty, 
<declaration_assign>: $=, @empty, 
<function_declaration_suffix>: $,, @empty, 
<declaration_init>: $id, 
<declaration_init_list>: $,, @empty, 
<declaration>: $double, $char, $int, 
<function_declaration>: $double, $char, $int, 
<function_declaration_list>: $double, $char, $int, @empty, 
<function_definition>: 
<statement>: @empty, $double, $char, $int, $id, $;, $continue, $break, $return, $if, $while, $for, ${, 
<statement_list>: @empty, $double, $char, $int, $id, $;, $continue, $break, $return, $if, $while, $for, ${, 
<expression_statement>: $id, @empty, $;, 
<jump_statement>: $continue, $break, $return, 
<iteration_statement>: $while, $for, 
<compound_statement>: ${, 
<external_declaration>: $double, $char, $int, 
